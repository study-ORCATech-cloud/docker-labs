version: '3.8'

services:
  # Exercise 1: Basic Volume Persistence with PostgreSQL
  postgres-db:
    image: postgres:14
    container_name: postgres-persistence
    environment:
      POSTGRES_PASSWORD: example
      POSTGRES_USER: dbuser
      POSTGRES_DB: persistence_demo
    # TODO: Configure a named volume for PostgreSQL data persistence
    # HINT: Mount the volume to /var/lib/postgresql/data to store database files
    # HINT: Also mount the init.sql script as a bind mount to initialize the database
    ports:
      - "5432:5432"
    networks:
      - lab02_network

  # Exercise 2: Development Environment with Bind Mounts
  webapp:
    build: ./exercise2
    container_name: webapp-dev
    # TODO: Configure a bind mount for the application code
    # HINT: Mount the local ./exercise2/app directory to /app in the container
    # HINT: This will allow code changes to be reflected immediately
    ports:
      - "8080:8080"
    environment:
      - FLASK_ENV=development
      - FLASK_APP=app.py
      - FLASK_DEBUG=1
    networks:
      - lab02_network
    depends_on:
      - postgres-db

  # Exercise 3: Sharing Data Between Services
  data-producer:
    build: ./exercise3/producer
    container_name: data-producer
    # TODO: Configure a named volume for sharing data between services
    # HINT: Mount the 'shared_data' volume to /shared-data
    networks:
      - lab02_network

  data-consumer:
    build: ./exercise3/consumer
    container_name: data-consumer
    # TODO: Configure the same named volume as read-only for the consumer
    # HINT: Mount the 'shared_data' volume to /shared-data with read-only flag
    depends_on:
      - data-producer
    networks:
      - lab02_network

  # Exercise 4: Volume Backup and Restore
  backup-service:
    image: alpine:latest
    container_name: backup-service
    # TODO: Configure volume mounts for backup and restore operations
    # HINT: Mount the PostgreSQL data volume as read-only at /source
    # HINT: Mount the local ./exercise4/backups directory to /backups
    command: >
      sh -c "echo 'Backup service ready. Run backup or restore commands manually.'"
    networks:
      - lab02_network

networks:
  lab02_network:
    driver: bridge

# TODO: Define named volumes to be used by the services
# HINT: Create postgres_data and shared_data volumes with explicit names
volumes: # Define your volumes here
