version: '3.8'

# Main docker-compose file for LAB09-MultiStageBuilds
# This file orchestrates all exercises as separate services

services:
  # Exercise 1: Basic Multi-Stage Builds
  exercise1-app:
    # TODO: Build the exercise1 app service
    # HINT: Use the build directive to point to ./exercise1
    # TODO: Configure ports for the exercise1 app
    # HINT: Map port 8000 to container port 8000
    # TODO: Configure environment variables for the exercise1 app
    # HINT: Set APP_ENV to demo
    # TODO: Configure networks for the exercise1 app
    # HINT: Connect to the multistage-net network

  exercise1-app-original:
    # TODO: Build the exercise1 original app service
    # HINT: Use the build directive to point to ./exercise1 with Dockerfile.original
    # TODO: Configure ports for the exercise1 original app
    # HINT: Map port 8001 to container port 8000
    # TODO: Configure environment variables for the exercise1 original app
    # HINT: Set APP_ENV to demo
    # TODO: Configure networks for the exercise1 original app
    # HINT: Connect to the multistage-net network

  # Exercise 2: Advanced Dependency Management
  exercise2-app:
    # TODO: Build the exercise2 app service
    # HINT: Use the build directive to point to ./exercise2
    # TODO: Configure build arguments for the exercise2 app
    # HINT: Set BUILD_ENV to development
    # TODO: Configure ports for the exercise2 app
    # HINT: Map port 8010 to container port 8000
    # TODO: Configure environment variables for the exercise2 app
    # HINT: Set APP_ENV to development
    # TODO: Configure networks for the exercise2 app
    # HINT: Connect to the multistage-net network

  # Exercise 3: Production-Grade Python Application
  exercise3-app-dev:
    # TODO: Build the exercise3 development app service
    # HINT: Use the build directive to point to ./exercise3 with target development
    # TODO: Configure ports for the exercise3 development app
    # HINT: Map port 8020 to container port 8000
    # TODO: Configure environment variables for the exercise3 development app
    # HINT: Set FLASK_ENV to development and FLASK_DEBUG to 1
    # TODO: Configure volumes for the exercise3 development app
    # HINT: Mount ./exercise3/app to /app
    # TODO: Configure networks for the exercise3 development app
    # HINT: Connect to the multistage-net network

  exercise3-app-prod:
    # TODO: Build the exercise3 production app service
    # HINT: Use the build directive to point to ./exercise3 with target production
    # TODO: Configure ports for the exercise3 production app
    # HINT: Map port 8021 to container port 8000
    # TODO: Configure environment variables for the exercise3 production app
    # HINT: Set FLASK_ENV to production and FLASK_DEBUG to 0
    # TODO: Configure networks for the exercise3 production app
    # HINT: Connect to the multistage-net network

  # Exercise 4: Real-World Microservices Application
  exercise4-web:
    # TODO: Build the exercise4 web service
    # HINT: Use the build directive to point to ./exercise4/web-service with target development
    # TODO: Configure ports for the exercise4 web service
    # HINT: Map port 8030 to container port 8000
    # TODO: Configure environment variables for the exercise4 web service
    # HINT: Set API_URL to http://exercise4-api:5000
    # TODO: Configure service dependencies for the exercise4 web service
    # HINT: Depends on exercise4-api
    # TODO: Configure networks for the exercise4 web service
    # HINT: Connect to the multistage-net network

  exercise4-api:
    # TODO: Build the exercise4 API service
    # HINT: Use the build directive to point to ./exercise4/api-service with target development
    # TODO: Configure ports for the exercise4 API service
    # HINT: Map port 8031 to container port 5000
    # TODO: Configure environment variables for the exercise4 API service
    # HINT: Set DB_HOST, DB_PORT, DB_USER, DB_PASSWORD, and DB_NAME
    # TODO: Configure service dependencies for the exercise4 API service
    # HINT: Depends on exercise4-db
    # TODO: Configure networks for the exercise4 API service
    # HINT: Connect to the multistage-net network

  exercise4-db:
    # TODO: Configure the exercise4 database service
    # HINT: Use postgres:14-alpine as the image
    # TODO: Configure environment variables for the exercise4 database service
    # HINT: Set POSTGRES_USER, POSTGRES_PASSWORD, and POSTGRES_DB
    # TODO: Configure volumes for the exercise4 database service
    # HINT: Use a named volume for data
    # TODO: Configure networks for the exercise4 database service
    # HINT: Connect to the multistage-net network

networks:
  multistage-net:
    driver: bridge

volumes:
  postgres_data:
