version: '3.8'

services:
  # TODO: Configure a scalable web service for horizontal scaling
  # HINT: Configure the service to allow multiple replicas
  web:
    # TODO: Configure build path to the web service
    # TODO: Configure port mapping for the web service
    # TODO: Configure service dependencies
    # TODO: Configure environment variables

    # TODO: Configure the deployment settings for scaling
    # HINT: Set the initial number of replicas and resource constraints

    # TODO: Configure networks for service discovery
    # HINT: Connect to a shared network for inter-service communication

  # TODO: Configure a Redis service for centralized data storage
  # HINT: This allows sharing state between web service instances
  redis:
    # TODO: Specify the Redis image

    # TODO: Configure networks for Redis
    # HINT: Must be on the same network as the web services

    # TODO: Configure persistent storage for Redis
    # HINT: Mount a named volume for data persistence

  # TODO: Configure Nginx as a load balancer for web service instances
  # HINT: This service will distribute requests across web containers
  nginx:
    # TODO: Specify the Nginx image

    # TODO: Configure port mapping for the load balancer

    # TODO: Mount the Nginx configuration file
    # HINT: Use a bind mount with read-only permissions

    # TODO: Configure service dependencies
    # HINT: Nginx should start after the web service

    # TODO: Configure networks for the load balancer
    # HINT: Must be on the same network as the web services

    # TODO: Define a Docker network for container communication
    # HINT: Create a bridge network that all services will connect to
networks: # TODO: Define your network configuration

# TODO: Define a Docker volume for persistent data
# HINT: Create a named volume for Redis data storage
volumes: # TODO: Define your volume configuration
