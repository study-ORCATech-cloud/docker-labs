version: '3.8'

# Main docker-compose file for LAB08-MonitoringLogging
# This file orchestrates the monitoring and logging services for all exercises

services:
  # Exercise 1: Basic Monitoring Demo
  exercise1-app:
    # TODO: Build the exercise1 app service
    # HINT: Use the build directive to point to ./exercise1/app
    # TODO: Configure ports for the exercise1 app
    # HINT: Map port 8081 to container port 8080
    # TODO: Configure networks for the exercise1 app
    # HINT: Connect to the monitoring-net network

  # Exercise 2: Advanced Application Monitoring
  exercise2-app:
    # TODO: Build the exercise2 app service
    # HINT: Use the build directive to point to ./exercise2/app
    # TODO: Configure ports for the exercise2 app
    # HINT: Map port 8082 to container port 8080
    # TODO: Configure networks for the exercise2 app
    # HINT: Connect to the monitoring-net network

  # Exercise 3: Centralized Logging Demo
  exercise3-app:
    # TODO: Build the exercise3 app service
    # HINT: Use the build directive to point to ./exercise3/app
    # TODO: Configure ports for the exercise3 app
    # HINT: Map port 8083 to container port 8080
    # TODO: Configure networks for the exercise3 app
    # HINT: Connect to the monitoring-net network

  # Exercise 4: Complete Observability Demo
  exercise4-app:
    # TODO: Build the exercise4 app service
    # HINT: Use the build directive to point to ./exercise4/app
    # TODO: Configure ports for the exercise4 app
    # HINT: Map port 8084 to container port 8080
    # TODO: Configure networks for the exercise4 app
    # HINT: Connect to the monitoring-net network

  # Prometheus - Metrics Storage and Query Engine
  prometheus:
    # TODO: Configure the Prometheus service
    # HINT: Use prom/prometheus:v2.45.0 as the image
    # TODO: Configure ports for Prometheus
    # HINT: Map port 9090 to container port 9090
    # TODO: Configure volumes for Prometheus
    # HINT: Mount prometheus.yml and use a named volume for data
    # TODO: Configure networks for Prometheus
    # HINT: Connect to the monitoring-net network

  # Grafana - Visualization Platform
  grafana:
    # TODO: Configure the Grafana service
    # HINT: Use grafana/grafana:10.0.3 as the image
    # TODO: Configure ports for Grafana
    # HINT: Map port 3000 to container port 3000
    # TODO: Configure environment variables for Grafana
    # HINT: Set admin password and disable sign-up
    # TODO: Configure volumes for Grafana
    # HINT: Use a named volume for data and mount the grafana directory
    # TODO: Configure networks for Grafana
    # HINT: Connect to the monitoring-net network
    # TODO: Set service dependencies for Grafana
    # HINT: Depends on Prometheus

  # Elasticsearch - Log Storage and Search
  elasticsearch:
    # TODO: Configure the Elasticsearch service
    # HINT: Use docker.elastic.co/elasticsearch/elasticsearch:7.17.9 as the image
    # TODO: Configure ports for Elasticsearch
    # HINT: Map ports 9200 and 9300
    # TODO: Configure environment variables for Elasticsearch
    # HINT: Set discovery type and Java options
    # TODO: Configure volumes for Elasticsearch
    # HINT: Use a named volume for data
    # TODO: Configure networks for Elasticsearch
    # HINT: Connect to the monitoring-net network

  # Logstash - Log Processing Pipeline
  logstash:
    # TODO: Configure the Logstash service
    # HINT: Use docker.elastic.co/logstash/logstash:7.17.9 as the image
    # TODO: Configure ports for Logstash
    # HINT: Map ports 5044, 5000, and 9600
    # TODO: Configure environment variables for Logstash
    # HINT: Set Java options
    # TODO: Configure volumes for Logstash
    # HINT: Mount logstash.yml and pipeline directory
    # TODO: Configure networks for Logstash
    # HINT: Connect to the monitoring-net network
    # TODO: Set service dependencies for Logstash
    # HINT: Depends on Elasticsearch

  # Kibana - Log Visualization
  kibana:
    # TODO: Configure the Kibana service
    # HINT: Use docker.elastic.co/kibana/kibana:7.17.9 as the image
    # TODO: Configure ports for Kibana
    # HINT: Map port 5601
    # TODO: Configure environment variables for Kibana
    # HINT: Set Elasticsearch hosts
    # TODO: Configure networks for Kibana
    # HINT: Connect to the monitoring-net network
    # TODO: Set service dependencies for Kibana
    # HINT: Depends on Elasticsearch

  # Node Exporter - Host Metrics
  node-exporter:
    # TODO: Configure the Node Exporter service
    # HINT: Use prom/node-exporter:v1.6.1 as the image
    # TODO: Configure ports for Node Exporter
    # HINT: Map port 9100
    # TODO: Configure volumes for Node Exporter
    # HINT: Mount /proc, /sys, and rootfs as read-only
    # TODO: Configure networks for Node Exporter
    # HINT: Connect to the monitoring-net network

  # cAdvisor - Container Metrics
  cadvisor:
    # TODO: Configure the cAdvisor service
    # HINT: Use gcr.io/cadvisor/cadvisor:v0.47.1 as the image
    # TODO: Configure ports for cAdvisor
    # HINT: Map port 8080
    # TODO: Configure volumes for cAdvisor
    # HINT: Mount rootfs, /var/run, /sys, /var/lib/docker, and /dev/disk as read-only
    # TODO: Configure networks for cAdvisor
    # HINT: Connect to the monitoring-net network
    # TODO: Set privileged mode for cAdvisor
    # HINT: Use privileged: true and map /dev/kmsg

networks:
  monitoring-net:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data:
  elasticsearch_data:
